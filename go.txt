 Very Fast Language (Execution and complie both)
 Execution lang - JS, python, ruby, php
 Compile lang - Rust, C, C++, Go
 VM Lang - Java, C#
 Go lang code directly to machine code (natively complied lang)
 use much less memory from java, c#
 Building Textio project also!!

 Compile and Compilation  - 
 Compilation is the process of compile the code.
 go mod init ("Filename") => it create go.mod file 
 It contains all dependencies required by our program along with their versions
 go run main.go
 It run the file

 In go, we can share a os dependent file like after main.go -> go build main.go -> main.exe . 
 This command create a executable file as per the base operating system.

 Go is garbage collected lang like java but nothing like java jvm 

 Data Types - 
 bool, string, int, int8, int16, int32, int64
 uint, uint8, uint16, uint32, uint64, uintptr
 byte //alias for uint8
 rune //alias for int32, represent unicode code point

float32, float64
complex64, complex128

short variable declaration using := short assignment can be used in place os a var declaration.

Eg- empty := "" instad of var empty string


We can also build .go for any other os from any os 
For this - Terminal > GOOS="linux" go build

auto memory allocation  || memory allocation
2 ways - new() , make()

new() -> 
1- Allocate memory but not init 
2- you wil get a memory address
3- zeroed storage

make() ->
1- Allocate memory and init
2- you wil get a memory address
3- non-zeroed storage

GC happens automaticallly - (garbage collector) [https://pkg.go.dev/runtime]
out of scope or nil

GOSC variable use to set the initial gc percentage

POINTERS - 
Pointers are variables that hold addresses instead of values directly stored at those locations.
They allow us to indirect access data structures through pointers rather than direct access which makes them more flexible

go work use myTime   
PS D:\courses\New folder\Go-Lang Code> go work use pointers
